// Generated by CoffeeScript 1.3.3
/*

Android Pattern Lock Screen 
http://cheghamwassim.com/apps/js/android-lock-screen/

Copyright 2012, Wassim Chegham
Licensed under the MIT or GPL Version 2 licenses.

The PatternLockScreen class.
@constructor
@public
*/

var LockScreen;

LockScreen = (function() {

  function LockScreen(options) {
    var _this = this;
    this._name = "LockScreen";
    try {
      window.Kinetic;
    } catch (error) {
      throw "[" + this._name + "] Kinetic.js was not detected!";
    }
    try {
      options.container;
    } catch (error) {
      throw "[" + this._name + "] A container must be specified!";
    }
    this._config = {};
    this._config.width = options.width || 400;
    this._config.height = options.height || 400;
    this._config.container = options.container || null;
    this._config.onSuccess = options.onSuccess || null;
    this._config.onFailure = options.onFailure || null;
    this._config.pattern = options.pattern || null;
    this._stage = (function() {
      return new Kinetic.Stage({
        container: _this._config.container,
        width: _this._config.width,
        height: _this._config.height
      });
    })();
    this._dotsInnerLayer = new Kinetic.Layer();
    this._dotsOuterLayer = new Kinetic.Layer();
    this._lineLayer = new Kinetic.Layer();
    this._listenerLayer = new Kinetic.Layer();
    this._hintLayer = new Kinetic.Layer();
    this._hintLayer.setAlpha(0.1);
    this._stage.add(this._dotsInnerLayer);
    this._stage.add(this._dotsOuterLayer);
    this._stage.add(this._lineLayer);
    this._stage.add(this._hintLayer);
    this._stage.add(this._listenerLayer);
    this._pattern = (function() {
      return new Pattern({
        patternLayer: _this._dotsOuterLayer,
        lineLayer: _this._lineLayer,
        hintLayer: _this._hintLayer
      });
    })();
    this._dots = [];
    this._draw();
    if (this._config.pattern != null) {
      this._parseAndSaveUserPattern(this._config.pattern);
    }
    return this;
  }

  LockScreen.prototype._parseAndSaveUserPattern = function(pattern) {
    var dot, dotPosition, patternArray, patternNumber, _i, _len;
    patternArray = pattern.split(/[#\|_,; -]+/);
    for (_i = 0, _len = patternArray.length; _i < _len; _i++) {
      patternNumber = patternArray[_i];
      dotPosition = +patternNumber - 1;
      dot = this._dots[dotPosition];
      if (this._pattern.shouldDrawDot(dot)) {
        this._pattern.savePatternDot(dot);
      }
    }
    this._pattern.buildHint();
    return true;
  };

  LockScreen.prototype._draw = function() {
    var h, i, mH, mW, offsetH, offsetW, options, point, points, w, _i, _len;
    w = this._stage.getWidth();
    h = this._stage.getHeight();
    mW = Math.floor(w / 2);
    mH = Math.floor(h / 2);
    offsetW = Math.floor(w / 3);
    offsetH = Math.floor(h / 3);
    points = [
      {
        x: mW - offsetW,
        y: mH - offsetH
      }, {
        x: mW,
        y: mH - offsetH
      }, {
        x: mW + offsetW,
        y: mH - offsetH
      }, {
        x: mW - offsetW,
        y: mH
      }, {
        x: mW,
        y: mH
      }, {
        x: mW + offsetW,
        y: mH
      }, {
        x: mW - offsetW,
        y: mH + offsetH
      }, {
        x: mW,
        y: mH + offsetH
      }, {
        x: mW + offsetW,
        y: mH + offsetH
      }
    ];
    for (i = _i = 0, _len = points.length; _i < _len; i = ++_i) {
      point = points[i];
      options = {
        pattern: this._pattern,
        innerLayer: this._dotsInnerLayer,
        listenerLayer: this._listenerLayer,
        x: point.x,
        y: point.y
      };
      this._dots.push(new Dot(i, options));
    }
    return this;
  };

  LockScreen.prototype.clear = function() {
    var dot, _i, _len, _ref;
    this._pattern.clear();
    _ref = this._dots;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dot = _ref[_i];
      dot.clear();
    }
    return this;
  };

  LockScreen.prototype.reset = function() {
    this.clear();
    this._pattern.clearSavedPattern();
    return this;
  };

  LockScreen.prototype.unlock = function() {
    var _ref, _ref1;
    if (this._pattern.isValid()) {
      this.validatePattern();
      if ((_ref = this._config.onSuccess) != null) {
        _ref.call(this);
      }
      return true;
    } else {
      this.invalidatePattern();
      if ((_ref1 = this._config.onFailure) != null) {
        _ref1.call(this);
      }
      return false;
    }
  };

  LockScreen.prototype.validatePattern = function() {
    return this;
  };

  LockScreen.prototype.invalidatePattern = function() {
    var dot, dots, line, _i, _len;
    dots = this._dotsOuterLayer.getChildren();
    line = this._lineLayer.getChildren();
    if (line[0] != null) {
      line[0].setFill("rgba(255,0,0,0.5)");
    }
    for (_i = 0, _len = dots.length; _i < _len; _i++) {
      dot = dots[_i];
      dot.setStroke("rgba(255,0,0,0.8)");
    }
    this._dotsOuterLayer.draw();
    this._lineLayer.draw();
    this._pattern.setToBeClearedOnNextUse(true);
    return this;
  };

  LockScreen.prototype.startRecordPattern = function() {
    this.clear();
    this._pattern.clearSavedPattern();
    this._pattern.setRecording(true);
    this._pattern.setToBeClearedOnNextUse(false);
    return this;
  };

  LockScreen.prototype.stopRecordPattern = function() {
    this.clear();
    this._pattern.setRecording(false);
    this._pattern.buildHint();
    return this;
  };

  LockScreen.prototype.showHint = function(canShow) {
    if (canShow) {
      this._pattern.showHint();
    } else {
      this._pattern.hideHint();
    }
    return this;
  };

  return LockScreen;

})();
